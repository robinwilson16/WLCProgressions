CREATE PROCEDURE [dbo].[SPR_PRG_GetOutcomesChartData]
	@System NVARCHAR(20),
    @AcademicYear NVARCHAR(5),
	@Measure NVARCHAR(20),
    @Level INT,
	@Drill NVARCHAR(24)
AS
BEGIN
	SET XACT_ABORT, NOCOUNT ON;
	SET DATEFORMAT ymd

	--DECLARE @System NVARCHAR(20) = 'ProSolution'
	--DECLARE @AcademicYear NVARCHAR(5) = '21/22'
	--DECLARE @Measure NVARCHAR(20) = 'Outstanding'
	--DECLARE @Level INT = 1
	--DECLARE @Drill NVARCHAR(24) = NULL
	

	DECLARE @NextYear VARCHAR(5) = CAST ( CAST ( LEFT ( @AcademicYear, 2 ) AS INT ) + 1 AS VARCHAR(2) ) + '/' + CAST ( CAST ( RIGHT ( @AcademicYear, 2 ) AS INT ) + 1 AS VARCHAR(2) )
	DECLARE @SQLChartTitle NVARCHAR(MAX);
	DECLARE @MeasureValue NVARCHAR(MAX); 
	DECLARE @AdditionalFields NVARCHAR(MAX); 
	DECLARE @AdditionalFieldsGroupBy NVARCHAR(MAX); 
	DECLARE @ValueField NVARCHAR(MAX);
	DECLARE @DrillToArea NVARCHAR(MAX) = N'';
    DECLARE @SQLString NVARCHAR(MAX);
    DECLARE @SQLParams NVARCHAR(MAX);

	IF(COALESCE ( @Measure, 'OUTSTANDING' ) = 'OUTSTANDING')
	BEGIN
		SET @SQLChartTitle = 
			N'
			''Outstanding Progressions by ''
			+ CASE
				WHEN @Level = 1 THEN ''Year''
				WHEN @Level = 2 THEN ''College''
				WHEN @Level = 3 THEN ''Faculty''
				WHEN @Level = 4 THEN ''Team''
				WHEN @Level = 5 THEN ''Course''
				ELSE ''Year''
			END';

		SET @MeasureValue = 
			N'
			SUM ( COALESCE ( ENR.Enrolments, 0 ) ) - SUM ( COALESCE ( PRG.HasValidProgressionDestination, 0 ) )';
	END
	ELSE
	BEGIN
		SET @SQLChartTitle = 
			N'
			''Recorded Progressions by ''
			+ CASE
				WHEN @Level = 1 THEN ''Year''
				WHEN @Level = 2 THEN ''College''
				WHEN @Level = 3 THEN ''Faculty''
				WHEN @Level = 4 THEN ''Team''
				WHEN @Level = 5 THEN ''Course''
				ELSE ''Year''
			END';

		SET @MeasureValue = 
			N'
			SUM ( COALESCE ( PRG.HasValidProgressionDestination, 0 ) )';
	END

	
	SET @ValueField = 
		N'
		CASE
			WHEN @Level = 1 THEN CRS.AcademicYearID
			WHEN @Level = 2 THEN
				CASE
					WHEN CGRP.Code IS NULL THEN ''00 - Unknown''
					ELSE
						RTRIM ( CGRP.Code ) + '' - '' + CGRP.Name
				END
			WHEN @Level = 3 THEN
				CASE
					WHEN FAC.Code IS NULL THEN ''00 - Unknown''
					ELSE
						RTRIM ( FAC.Code ) + '' - '' + FAC.Name
				END
			WHEN @Level = 4 THEN
				RTRIM ( COALESCE ( FAC.Code, ''00'' ) ) + '' - '' + 
				+ CASE
					WHEN TEAM.Code IS NULL THEN ''00 - Unknown''
					ELSE
						RTRIM ( TEAM.Code ) + '' - '' + TEAM.Name
				END
			WHEN @Level = 5 THEN
				RTRIM ( COALESCE ( FAC.Code, ''00'' ) ) + '' - '' + RTRIM ( COALESCE ( TEAM.Code, ''00'' ) ) + '' - '' 
				+ CASE
					WHEN CRS.Code IS NULL THEN ''00 - Unknown''
					ELSE
						RTRIM ( CRS.Code ) + '' - '' + CRS.Name
				END 
				+ CASE
					WHEN GRP.Code IS NULL THEN ''''
					ELSE
						'' - '' + GRP.Code
				END
			ELSE CRS.AcademicYearID
		END';

	IF( COALESCE ( @Level, 1 ) = 1)
	BEGIN
		SET @AdditionalFields =
			N'
			AcademicYear = @AcademicYear,
			CollegeCode = NULL,
			CollegeName = NULL,
			FacCode = NULL,
			FacName = NULL,
			TeamCode = NULL,
			TeamName = NULL,
			CourseID = NULL,
			CourseCode = NULL,
			CourseTitle = NULL,
			GroupID = NULL,
			GroupCode = NULL,
			GroupName = NULL';

		SET @AdditionalFieldsGroupBy =
			N'
			CRS.AcademicYearID';
	END
	ELSE IF( COALESCE ( @Level, 1 ) = 2)
	BEGIN
		SET @AdditionalFields =
			N'
			AcademicYear = @AcademicYear,
			CollegeCode = COALESCE ( RTRIM ( CGRP.Code ), ''00'' ),
			CollegeName = COALESCE ( CGRP.Name, ''-- Unknown --'' ),
			FacCode = NULL,
			FacName = NULL,
			TeamCode = NULL,
			TeamName = NULL,
			CourseID = NULL,
			CourseCode = NULL,
			CourseTitle = NULL,
			GroupID = NULL,
			GroupCode = NULL,
			GroupName = NULL';

		SET @AdditionalFieldsGroupBy =
			N'
			COALESCE ( RTRIM ( CGRP.Code ), ''00'' ),
			COALESCE ( CGRP.Name, ''-- Unknown --'' )';
	END
	ELSE IF( COALESCE ( @Level, 1 ) = 3)
	BEGIN
		SET @AdditionalFields =
			N'
			AcademicYear = @AcademicYear,
			CollegeCode = COALESCE ( RTRIM ( CGRP.Code ), ''00'' ),
			CollegeName = COALESCE ( CGRP.Name, ''-- Unknown --'' ),
			FacCode = COALESCE ( RTRIM ( FAC.Code ), ''00'' ),
			FacName = COALESCE ( FAC.Name, ''-- Unknown --'' ),
			TeamCode = NULL,
			TeamName = NULL,
			CourseID = NULL,
			CourseCode = NULL,
			CourseTitle = NULL,
			GroupID = NULL,
			GroupCode = NULL,
			GroupName = NULL';

		SET @AdditionalFieldsGroupBy =
			N'
			COALESCE ( RTRIM ( CGRP.Code ), ''00'' ),
			COALESCE ( CGRP.Name, ''-- Unknown --'' ),
			COALESCE ( RTRIM ( FAC.Code ), ''00'' ),
			COALESCE ( FAC.Name, ''-- Unknown --'' )';

		IF @Drill IS NOT NULL
		BEGIN
			SET @DrillToArea =
			N'
			AND COALESCE ( CGRP.Code, ''00'' ) = @Drill';
		END
	END
	ELSE IF( COALESCE ( @Level, 1 ) = 4)
	BEGIN
		SET @AdditionalFields =
			N'
			AcademicYear = @AcademicYear,
			CollegeCode = COALESCE ( RTRIM ( CGRP.Code ), ''00'' ),
			CollegeName = COALESCE ( CGRP.Name, ''-- Unknown --'' ),
			FacCode = COALESCE ( RTRIM ( FAC.Code ), ''00'' ),
			FacName = COALESCE ( FAC.Name, ''-- Unknown --'' ),
			TeamCode = COALESCE ( RTRIM ( TEAM.Code ), ''00'' ),
			TeamName = COALESCE ( TEAM.Name, ''-- Unknown --'' ),
			CourseID = NULL,
			CourseCode = NULL,
			CourseTitle = NULL,
			GroupID = NULL,
			GroupCode = NULL,
			GroupName = NULL';

		SET @AdditionalFieldsGroupBy =
			N'
			COALESCE ( RTRIM ( CGRP.Code ), ''00'' ),
			COALESCE ( CGRP.Name, ''-- Unknown --'' ),
			COALESCE ( RTRIM ( FAC.Code ), ''00'' ),
			COALESCE ( FAC.Name, ''-- Unknown --'' ),
			COALESCE ( RTRIM ( TEAM.Code ), ''00'' ),
			COALESCE ( TEAM.Name, ''-- Unknown --'' )';
		
		IF @Drill IS NOT NULL
		BEGIN
			SET @DrillToArea =
			N'
			AND COALESCE ( FAC.Code, ''00'' ) = @Drill';
		END
	END
	ELSE IF( COALESCE ( @Level, 1 ) = 5)
	BEGIN
		SET @AdditionalFields =
			N'
			AcademicYear = @AcademicYear,
			CollegeCode = COALESCE ( RTRIM ( CGRP.Code ), ''00'' ),
			CollegeName = COALESCE ( CGRP.Name, ''-- Unknown --'' ),
			FacCode = COALESCE ( RTRIM ( FAC.Code ), ''00'' ),
			FacName = COALESCE ( FAC.Name, ''-- Unknown --'' ),
			TeamCode = COALESCE ( RTRIM ( TEAM.Code ), ''00'' ),
			TeamName = COALESCE ( TEAM.Name, ''-- Unknown --'' ),
			CourseID = CRS.OfferingID,
			CourseCode = COALESCE ( CRS.Code, ''UNK'' ),
			CourseTitle = COALESCE ( CRS.Name, ''-- Unknown --'' ),
			GroupID = GRP.OfferingGroupID,
			GroupCode = COALESCE ( GRP.Code, ''UNK'' ),
			GroupName = COALESCE ( GRP.Description, ''-- Unknown --'' )';

		SET @AdditionalFieldsGroupBy =
			N'
			COALESCE ( RTRIM ( CGRP.Code ), ''00'' ),
			COALESCE ( CGRP.Name, ''-- Unknown --'' ),
			COALESCE ( RTRIM ( FAC.Code ), ''00'' ),
			COALESCE ( FAC.Name, ''-- Unknown --'' ),
			COALESCE ( RTRIM ( TEAM.Code ), ''00'' ),
			COALESCE ( TEAM.Name, ''-- Unknown --'' ),
			CRS.OfferingID,
			COALESCE ( CRS.Code, ''UNK'' ),
			COALESCE ( CRS.Name, ''-- Unknown --'' ),
			GRP.OfferingGroupID,
			COALESCE ( GRP.Code, ''UNK'' ),
			COALESCE ( GRP.Description, ''-- Unknown --'' )';

		IF @Drill IS NOT NULL
		BEGIN
			SET @DrillToArea =
			N'
			AND COALESCE ( TEAM.Code, ''00'' ) = @Drill';
		END
	END

    SET @SQLString = 
		N'
		SELECT
			ChartDataID = CAST ( ROW_NUMBER () OVER ( ORDER BY NEWID() ) AS INT ),
			ChartTitle = 
				' + @SQLChartTitle + ',
			Title = 
				' + @ValueField + ',
			Total = SUM ( COALESCE ( ENR.Enrolments, 0 ) ),
			Number = ' + @MeasureValue + ',
			Value = 
				ROUND (
					CASE
						WHEN SUM ( COALESCE ( ENR.Enrolments, 0 ) ) = 0 THEN 0
						ELSE
							CAST ( ' + @MeasureValue + ' AS FLOAT ) / CAST ( SUM ( COALESCE ( ENR.Enrolments, 0 ) ) AS FLOAT )
					END
				, 4 ),
			Type = ''Percent'',
			Level = CAST ( @Level AS INT ),
			' + @AdditionalFields + '
		FROM ' + @System + '.dbo.Offering CRS
		LEFT JOIN ' + @System + '.dbo.Site STE
			ON STE.SiteID = CRS.SiteID
		LEFT JOIN ' + @System + '.dbo.CollegeLevel TEAM
			ON TEAM.SID = CRS.SID
		LEFT JOIN ' + @System + '.dbo.CollegeLevel FAC
			ON FAC.SID = TEAM.ParentSID
		LEFT JOIN ' + @System + '.dbo.CollegeLevel CGRP
			ON CGRP.SID = FAC.ParentSID
		LEFT JOIN (
			SELECT DISTINCT
				LNK.SubOfferingID
			FROM ' + @System + '.dbo.LinkedOffering LNK
		) PAR
			ON PAR.SubOfferingID = CRS.OfferingID
		LEFT JOIN ' + @System + '.dbo.Learning_Aim AIM
			ON AIM.LEARNING_AIM_REF = CRS.QualID
		LEFT JOIN ' + @System + '.dbo.OfferingGroup GRP
			ON GRP.OfferingID = CRS.OfferingID
		LEFT JOIN (
			SELECT
				ENR.OfferingID,
				ENR.OfferingGroupID,
				Enrolments = COUNT ( SD.StudentDetailID )
			FROM ' + @System + '.dbo.StudentDetail SD
			INNER JOIN ' + @System + '.dbo.Enrolment ENR
				ON ENR.StudentDetailID = SD.StudentDetailID
			WHERE
				SD.AcademicYearID = @AcademicYear
				AND ENR.CompletionStatusID IN ( ''1'', ''2'' )
				AND COALESCE ( ENR.ActualEndDate, ENR.ExpectedEndDate ) BETWEEN ''20'' + LEFT ( @AcademicYear, 2 ) + ''-08-01'' AND ''20'' + RIGHT ( @AcademicYear, 2 ) + ''-07-31''
			GROUP BY
				ENR.OfferingID,
				ENR.OfferingGroupID	
		) ENR
			ON ENR.OfferingID = CRS.OfferingID
			AND COALESCE ( ENR.OfferingGroupID, 0 ) = COALESCE ( GRP.OfferingGroupID, 0 )
		LEFT JOIN (
			SELECT
				ENR.OfferingID,
				ENR.OfferingGroupID,
				Enrolments = COUNT ( SD.StudentDetailID ),
				HasProgression =
					SUM ( 
						CASE 
							WHEN COALESCE ( NYA.NumApps, 0 ) >= 1 THEN 1
							WHEN COALESCE ( NYE.NumEnrols, 0 ) >= 1 THEN 1
							WHEN NPR.StudentRef IS NOT NULL THEN 1
							ELSE 0
						END
					),
				HasDestination =
					SUM ( 
						CASE 
							WHEN COALESCE ( DES.NumDestinations, 0 ) >= 1 THEN 1
							ELSE 0
						END
					),
				HasValidDestination =
					SUM ( 
						CASE 
							WHEN COALESCE ( DES.NumValidDestinations, 0 ) >= 1 THEN 1
							ELSE 0
						END
					),
				HasProgressionDestination =
					SUM ( 
					CASE 
						WHEN COALESCE ( NYA.NumApps, 0 ) >= 1 THEN 1
						WHEN COALESCE ( NYE.NumEnrols, 0 ) >= 1 THEN 1
						WHEN COALESCE ( DES.NumDestinations, 0 ) >= 1 THEN 1
						WHEN NPR.StudentRef IS NOT NULL THEN 1
						ELSE 0
					END
				),
				HasValidProgressionDestination =
					SUM ( 
					CASE 
						WHEN COALESCE ( NYA.NumApps, 0 ) >= 1 THEN 1
						WHEN COALESCE ( NYE.NumEnrols, 0 ) >= 1 THEN 1
						WHEN COALESCE ( DES.NumValidDestinations, 0 ) >= 1 THEN 1
						WHEN NPR.StudentRef IS NOT NULL THEN 1
						ELSE 0
					END
				)
	'

	SET @SQLString += 
		N'
			FROM ' + @System + '.dbo.StudentDetail SD
			INNER JOIN ' + @System + '.dbo.Enrolment ENR
				ON ENR.StudentDetailID = SD.StudentDetailID
			INNER JOIN ' + @System + '.dbo.Offering CRS
				ON CRS.OfferingID = ENR.OfferingID
			LEFT JOIN (
				SELECT 
					SD.StudentID,
					SD.StudentDetailID,
					NumApps = COUNT ( CRS.OfferingID )
				FROM ' + @System + '.dbo.StudentDetail SD
				INNER JOIN ' + @System + '.dbo.Application APP
					ON APP.StudentDetailID = SD.StudentDetailID
				INNER JOIN ' + @System + '.dbo.ApplicationCourse APPC
					ON APPC.ApplicationID = APP.ApplicationID
				INNER JOIN ' + @System + '.dbo.Offering CRS
					ON CRS.OfferingID = APPC.OfferingID
				WHERE
					SD.AcademicYearID = @NextYear
					AND COALESCE ( APP.CollegeDecisionID, 1 ) <> 0
					AND COALESCE ( APP.DecisionID, 1 ) = 1
				GROUP BY
					SD.AcademicYearID,
					SD.StudentID,
					SD.StudentDetailID
			) NYA
				ON NYA.StudentID = SD.StudentID
			LEFT JOIN (
				SELECT 
					SD.AcademicYearID,
					SD.StudentID,
					SD.StudentDetailID,
					NumEnrols = COUNT ( CRS.OfferingID )
				FROM ' + @System + '.dbo.StudentDetail SD
				INNER JOIN ' + @System + '.dbo.Enrolment ENR
					ON ENR.StudentDetailID = SD.StudentDetailID
				INNER JOIN ' + @System + '.dbo.Offering CRS
					ON CRS.OfferingID = ENR.OfferingID
				WHERE
					SD.AcademicYearID = @NextYear
					AND ENR.CompletionStatusID IN ( ''1'', ''2'', ''3'' )
				GROUP BY
					SD.AcademicYearID,
					SD.StudentID,
					SD.StudentDetailID
			) NYE
				ON NYE.StudentID = SD.StudentID
			LEFT JOIN (
				SELECT
					OC.StudentID,
					NumDestinations = COUNT ( OC.StudentOutcomeID ),
					NumValidDestinations = SUM ( CAST ( DES.IsAvailableWeb AS INT ) )
				FROM ' + @System + '.dbo.StudentOutcome OC
				INNER JOIN ' + @System + '.dbo.LocalDestination DES
					ON DES.LocalDestinationID = OC.LocalDestinationID
				WHERE
					OC.ReturnYearID >= @AcademicYear
					AND OC.CreatedDate >= ''20'' + RIGHT ( @AcademicYear, 2 ) + ''-04-01''
					AND OC.EndDate IS NULL
				GROUP BY
					OC.StudentID
			) DES
				ON DES.StudentID = SD.StudentID
			LEFT JOIN WLC.dbo.PRG_NoProgressionRoute NPR
				ON NPR.StudentRef = SD.RefNo
				AND NPR.AcademicYear = @NextYear
				AND NPR.OfferingID = CRS.OfferingID
				AND NPR.SystemDatabase = ''' + @System + '''
			WHERE
				SD.AcademicYearID = @AcademicYear
				AND ENR.CompletionStatusID IN ( ''1'', ''2'' )
				--AND SD.RefNo = ''11151451''
			GROUP BY
				ENR.OfferingID,
				ENR.OfferingGroupID
		) PRG
			ON PRG.OfferingID = CRS.OfferingID
			AND COALESCE ( PRG.OfferingGroupID, 0 ) = COALESCE ( GRP.OfferingGroupID, 0 )
		WHERE
			CRS.AcademicYearID = @AcademicYear
			--	AND CRS.QualID IS NOT NULL ---MB commented out as this stopping the ESOL/Skills Pathway Study programmes from coming ito the system. 
			--AND COALESCE ( AIM.LEARNING_AIM_TYPE_CODE, ''0'' ) NOT IN ( ''0003'', ''1439'' ) --Not GCSE/FS MB added ISNULL clause as required for ESOL/Skills Pathway Study programmes
			AND PAR.SubOfferingID IS NULL --Is a parent (has no parents itself)
			AND CRS.Code NOT LIKE ''%TUT''
			AND CRS.Code NOT LIKE ''%WEX''
			AND CRS.Code NOT LIKE ''%DSS''
			AND CRS.Code NOT LIKE ''%ENR''
			AND CRS.Code NOT LIKE ''%CDF''
			AND CRS.FranchisingPartnerID IS NULL --Not a partner
			AND COALESCE ( ENR.Enrolments, 0 ) > 0
			AND CGRP.Code <> ''00''
			' + @DrillToArea + '
		GROUP BY
			' + @ValueField + ',
			' + @AdditionalFieldsGroupBy + '
		ORDER BY
			' + @ValueField;

	--SELECT @SQLString AS [processing-instruction(x)] FOR XML PATH('')

    SET @SQLParams = 
        N'@System NVARCHAR(20),
        @AcademicYear NVARCHAR(5),
		@NextYear NVARCHAR(5),
        @Level NVARCHAR(10),
		@Drill NVARCHAR(24)';

    EXECUTE sp_executesql 
        @SQLString, 
        @SQLParams, 
        @System = @System, 
        @AcademicYear = @AcademicYear, 
		@NextYear = @NextYear, 
        @Level = @Level,
		@Drill = @Drill;
END
CREATE PROCEDURE [dbo].[SPR_PRG_GetCourseGroupList]
	@System NVARCHAR(20),
    @AcademicYear NVARCHAR(5),
    @RequireEnrols BIT,
	@ShowOutstanding BIT,
    @CourseSearch NVARCHAR(255)
AS
BEGIN
	SET NOCOUNT ON;
	
	--DECLARE @System NVARCHAR(20) = 'ProSolution'
	--DECLARE @AcademicYear NVARCHAR(5) = '18/19'
	--DECLARE @RequireEnrols BIT = 0
	--DECLARE @ShowOutstanding BIT = 1
	--DECLARE @CourseSearch VARCHAR(255) = 'English'
	
    DECLARE @SQLString NVARCHAR(MAX);
    DECLARE @SQLParams NVARCHAR(MAX);

    SET @SQLString = 
		N'
		SELECT
			AcademicYear = CRS.AcademicYearID,
			SiteCode = STE.Code,
			SiteName = STE.Description,
			FacCode = RTRIM ( FAC.Code ),
			FacName = FAC.Name,
			TeamCode = RTRIM ( TEAM.Code ),
			TeamName = TEAM.Name,
			CourseID = CRS.OfferingID,
			CourseCode = CRS.Code,
			CourseTitle = CRS.Name,
			AimCode = AIM.LEARNING_AIM_REF,
			AimTitle = AIM.LEARNING_AIM_TITLE,
			GroupID = COALESCE ( GRP.OfferingGroupID, 0 ),
			GroupCode = GRP.Code,
			GroupName = GRP.Description,
			Enrolments = COALESCE ( ENR.Enrolments, 0 ),
			HasProgression = COALESCE ( PRG.HasProgression, 0 ),
			HasDestination = COALESCE ( PRG.HasDestination, 0 ),
			HasValidDestination = COALESCE ( PRG.HasValidDestination, 0 ),
			HasProgressionDestination = COALESCE ( PRG.HasProgressionDestination, 0 ),
			CompletedRecords = COALESCE ( PRG.HasValidProgressionDestination, 0 ),
			CompletedRecordsPer = 
				ROUND (
					CASE
						WHEN COALESCE ( ENR.Enrolments, 0 ) = 0 THEN 0
						ELSE
							CAST ( PRG.HasValidProgressionDestination AS FLOAT ) / CAST ( COALESCE ( ENR.Enrolments, 0 ) AS FLOAT )
					END
				, 4 ),
			OutstandingRecords = COALESCE ( ENR.Enrolments, 0 ) - COALESCE ( PRG.HasValidProgressionDestination, 0 ),
			OutstandingRecordsPer = 
				ROUND (
					CASE
						WHEN COALESCE ( ENR.Enrolments, 0 ) = 0 THEN 0
						ELSE
							1.0 - CAST ( COALESCE ( PRG.HasValidProgressionDestination, 0 ) AS FLOAT ) / CAST ( COALESCE ( ENR.Enrolments, 0 ) AS FLOAT )
					END
				, 4 )
		FROM ' + @System + '.dbo.Offering CRS
		INNER JOIN ' + @System + '.dbo.Site STE
			ON STE.SiteID = CRS.SiteID
		INNER JOIN ' + @System + '.dbo.CollegeLevel TEAM
			ON TEAM.SID = CRS.SID
		LEFT JOIN (
			SELECT DISTINCT
				LNK.SubOfferingID
			FROM ' + @System + '.dbo.LinkedOffering LNK
		) CLD
			ON CLD.SubOfferingID = CRS.OfferingID
		LEFT JOIN ' + @System + '.dbo.CollegeLevel FAC
			ON FAC.SID = TEAM.ParentSID
		LEFT JOIN ' + @System + '.dbo.Learning_Aim AIM
			ON AIM.LEARNING_AIM_REF = CRS.QualID
		LEFT JOIN ' + @System + '.dbo.OfferingGroup GRP
			ON GRP.OfferingID = CRS.OfferingID
		LEFT JOIN (
			SELECT
				ENR.OfferingID,
				ENR.OfferingGroupID,
				Enrolments = COUNT ( SD.StudentDetailID )
			FROM ' + @System + '.dbo.StudentDetail SD
			INNER JOIN ' + @System + '.dbo.Enrolment ENR
				ON ENR.StudentDetailID = SD.StudentDetailID
			WHERE
				SD.AcademicYearID = @AcademicYear
				AND ENR.CompletionStatusID IN ( ''1'', ''2'' )
				AND COALESCE ( ENR.ActualEndDate, ENR.ExpectedEndDate ) BETWEEN ''20'' + LEFT ( @AcademicYear, 2 ) + ''-08-01'' AND ''20'' + RIGHT ( @AcademicYear, 2 ) + ''-07-31''
			GROUP BY
				ENR.OfferingID,
				ENR.OfferingGroupID	
		) ENR
			ON ENR.OfferingID = CRS.OfferingID
			AND COALESCE ( ENR.OfferingGroupID, 0 ) = COALESCE ( GRP.OfferingGroupID, 0 )
		LEFT JOIN (
			SELECT
				ENR.OfferingID,
				ENR.OfferingGroupID,
				Enrolments = COUNT ( SD.StudentDetailID ),
				HasProgression =
					SUM ( 
						CASE 
							WHEN COALESCE ( NYA.NumApps, 0 ) >= 1 THEN 1
							WHEN COALESCE ( NYE.NumEnrols, 0 ) >= 1 THEN 1
							ELSE 0
						END
					),
				HasDestination =
					SUM ( 
						CASE 
							WHEN COALESCE ( DES.NumDestinations, 0 ) >= 1 THEN 1
							ELSE 0
						END
					),
				HasValidDestination =
					SUM ( 
						CASE 
							WHEN COALESCE ( DES.NumValidDestinations, 0 ) >= 1 THEN 1
							ELSE 0
						END
					),
				HasProgressionDestination =
					SUM ( 
					CASE 
						WHEN COALESCE ( NYA.NumApps, 0 ) >= 1 THEN 1
						WHEN COALESCE ( NYE.NumEnrols, 0 ) >= 1 THEN 1
						WHEN COALESCE ( DES.NumDestinations, 0 ) >= 1 THEN 1
						ELSE 0
					END
				),
				HasValidProgressionDestination =
					SUM ( 
					CASE 
						WHEN COALESCE ( NYA.NumApps, 0 ) >= 1 THEN 1
						WHEN COALESCE ( NYE.NumEnrols, 0 ) >= 1 THEN 1
						WHEN COALESCE ( DES.NumValidDestinations, 0 ) >= 1 THEN 1
						ELSE 0
					END
				)
	'

	SET @SQLString += 
		N'
			FROM ' + @System + '.dbo.StudentDetail SD
			INNER JOIN ' + @System + '.dbo.Enrolment ENR
				ON ENR.StudentDetailID = SD.StudentDetailID
			INNER JOIN ' + @System + '.dbo.Offering CRS
				ON CRS.OfferingID = ENR.OfferingID
			LEFT JOIN (
				SELECT 
					SD.StudentID,
					SD.StudentDetailID,
					NumApps = COUNT ( CRS.OfferingID )
				FROM ' + @System + '.dbo.StudentDetail SD
				INNER JOIN ' + @System + '.dbo.Application APP
					ON APP.StudentDetailID = SD.StudentDetailID
				INNER JOIN ' + @System + '.dbo.ApplicationCourse APPC
					ON APPC.ApplicationID = APP.ApplicationID
				INNER JOIN ' + @System + '.dbo.Offering CRS
					ON CRS.OfferingID = APPC.OfferingID
				WHERE
					SD.AcademicYearID = CAST ( CAST ( LEFT ( @AcademicYear, 2 ) AS INT ) + 1 AS VARCHAR(2) ) + ''/'' + CAST ( CAST ( RIGHT ( @AcademicYear, 2 ) AS INT ) + 1 AS VARCHAR(2) )
					AND COALESCE ( APP.CollegeDecisionID, 1 ) <> 0
					AND COALESCE ( APP.DecisionID, 1 ) = 1
				GROUP BY
					SD.AcademicYearID,
					SD.StudentID,
					SD.StudentDetailID
			) NYA
				ON NYA.StudentID = SD.StudentID
			LEFT JOIN (
				SELECT 
					SD.AcademicYearID,
					SD.StudentID,
					SD.StudentDetailID,
					NumEnrols = COUNT ( CRS.OfferingID )
				FROM ' + @System + '.dbo.StudentDetail SD
				INNER JOIN ' + @System + '.dbo.Enrolment ENR
					ON ENR.StudentDetailID = SD.StudentDetailID
				INNER JOIN ' + @System + '.dbo.Offering CRS
					ON CRS.OfferingID = ENR.OfferingID
				WHERE
					SD.AcademicYearID = CAST ( CAST ( LEFT ( @AcademicYear, 2 ) AS INT ) + 1 AS VARCHAR(2) ) + ''/'' + CAST ( CAST ( RIGHT ( @AcademicYear, 2 ) AS INT ) + 1 AS VARCHAR(2) )
					AND ENR.CompletionStatusID IN ( ''1'', ''2'', ''3'' )
				GROUP BY
					SD.AcademicYearID,
					SD.StudentID,
					SD.StudentDetailID
			) NYE
				ON NYE.StudentID = SD.StudentID
			LEFT JOIN (
				SELECT
					OC.StudentID,
					NumDestinations = COUNT ( OC.StudentOutcomeID ),
					NumValidDestinations = SUM ( CAST ( DES.IsAvailableWeb AS INT ) )
				FROM ' + @System + '.dbo.StudentOutcome OC
				INNER JOIN ' + @System + '.dbo.LocalDestination DES
					ON DES.LocalDestinationID = OC.LocalDestinationID
				WHERE
					OC.ReturnYearID >= @AcademicYear
					AND OC.CreatedDate >= ''20'' + RIGHT ( @AcademicYear, 2 ) + ''-06-01''
					AND OC.EndDate IS NULL
				GROUP BY
					OC.StudentID
			) DES
				ON DES.StudentID = SD.StudentID
			WHERE
				SD.AcademicYearID = @AcademicYear
				AND ENR.CompletionStatusID IN ( ''1'', ''2'' )
			GROUP BY
				ENR.OfferingID,
				ENR.OfferingGroupID
		) PRG
			ON PRG.OfferingID = CRS.OfferingID
			AND COALESCE ( PRG.OfferingGroupID, 0 ) = COALESCE ( GRP.OfferingGroupID, 0 )
		WHERE
			CRS.AcademicYearID = @AcademicYear
			AND CRS.OfferingStatusID IN ( ''1'', ''3'' ) --Live and pending only
			AND CLD.SubOfferingID IS NULL --Is a parent (has no parents itself)
			AND CRS.FranchisingPartnerID IS NULL --Not a partner
			AND 
				CASE
					WHEN @RequireEnrols = 0 THEN 1
					ELSE
						CASE
							WHEN COALESCE ( ENR.Enrolments, 0 ) > 0 THEN 1 --Must have enrolments
							ELSE 0
						END 
				END = 1
			AND 
				CASE
					WHEN @ShowOutstanding = 0 THEN 1
					ELSE
						CASE
							WHEN COALESCE ( ENR.Enrolments, 0 ) - COALESCE ( PRG.HasValidProgressionDestination, 0 ) > 0 THEN 1 --Has outstanding progressions
							ELSE 0
						END 
				END = 1
			AND CRS.Code + '' - '' + CRS.Name LIKE ''%'' + @CourseSearch + ''%''
		ORDER BY
			STE.Code,
			FAC.Code,
			TEAM.Code,
			CRS.Code,
			GRP.Code';

    SET @SQLParams = 
        N'@System NVARCHAR(20),
        @AcademicYear NVARCHAR(5),
        @RequireEnrols BIT,
		@ShowOutstanding BIT,
        @CourseSearch NVARCHAR(255)';

    EXECUTE sp_executesql 
        @SQLString, 
        @SQLParams, 
        @System = @System, 
        @AcademicYear = @AcademicYear, 
        @RequireEnrols = @RequireEnrols,
		@ShowOutstanding = @ShowOutstanding,
        @CourseSearch = @CourseSearch;

END
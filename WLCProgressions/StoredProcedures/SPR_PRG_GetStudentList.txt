CREATE PROCEDURE [dbo].[SPR_PRG_GetStudentList]
	@System NVARCHAR(50),
    @SystemILP NVARCHAR(50),
    @AcademicYear NVARCHAR(5),
    @CourseID int,
	@GroupID int
AS
BEGIN
	SET DATEFORMAT ymd;

	--DECLARE @System NVARCHAR(50) = 'ProSolution'
	--DECLARE @SystemILP NVARCHAR(50) = 'PROMONITOR.ProMonitor'
	--DECLARE @AcademicYear NVARCHAR(5) = '21/22'
	--DECLARE @CourseID int = 38740
	--DECLARE @GroupID int = 46284


	DECLARE @NextYear VARCHAR(5) = CAST ( CAST ( LEFT ( @AcademicYear, 2 ) AS INT ) + 1 AS VARCHAR(2) ) + '/' + CAST ( CAST ( RIGHT ( @AcademicYear, 2 ) AS INT ) + 1 AS VARCHAR(2) )
    DECLARE @DestinationYear NVARCHAR(5)
    SET @DestinationYear = 
        ( 
            SELECT
                AcademicYear = 
                    CASE 
                        WHEN MONTH ( GETDATE() ) >= 10 THEN CAST ( YEAR ( GETDATE() ) - 2000 AS NVARCHAR(2) ) + '/' + CAST ( YEAR ( GETDATE() ) - 1999 AS NVARCHAR(2) )
                        ELSE CAST ( YEAR ( GETDATE() ) - 2001 AS NVARCHAR(2) ) + '/' + CAST ( YEAR ( GETDATE() ) - 2000 AS NVARCHAR(2) )
                    END 
        )


	DROP TABLE IF EXISTS #RegisterSession
	SELECT
		REG.RegisterID,
		RSES.RegisterSessionID,
		RSES.SessionNo,
		RSES.Date,
		RSES.StartTime,
		RSES.EndTime
		INTO #RegisterSession
	FROM ProSolution.dbo.Register REG
	INNER JOIN ProSolution.dbo.RegisterSession RSES
		ON RSES.RegisterID = REG.RegisterID
	WHERE
		REG.AcademicYearID = @AcademicYear

	UNION

	SELECT
		REGSC.RegisterID,
		RegisterSessionID = 0 - REGSC.RegisterScheduleID,
		SessionNo = 
			1 
			+ RS.SessionCount 
			+ (
				SELECT COUNT(*) 
				FROM ProSolution.dbo.RegisterSchedule RSch2
				WHERE 
					RSch2.RegisterID = REGSC.RegisterID 
					AND CAST(RSch2.Date AS DATETIME) + CAST(RSch2.StartTime AS DATETIME) > RS.MaxDate 
					AND CAST(RSch2.Date AS DATETIME) + CAST(RSch2.StartTime AS DATETIME) < CAST(REGSC.Date AS DATETIME) + CAST(REGSC.StartTime AS DATETIME)
			),
		REGSC.Date,
		REGSC.StartTime,
		REGSC.EndTime
	FROM ProSolution.dbo.Register REG
	INNER JOIN ProSolution.dbo.RegisterSchedule REGSC
		ON REGSC.RegisterID = REG.RegisterID
	INNER JOIN (
		SELECT 
			REG.RegisterID, 
			SessionCount = COUNT(*), 
			MaxDate = MAX(CAST(RSES.Date AS DATETIME) + CAST(RSES.StartTime AS DATETIME))
		FROM ProSolution.dbo.Register REG
		LEFT JOIN ProSolution.dbo.RegisterSession RSES
			ON RSES.RegisterID = REG.RegisterID
		GROUP BY 
			REG.RegisterID
	) RS
		ON REGSC.RegisterID = RS.RegisterID
	WHERE
		REG.AcademicYearID = @AcademicYear
		AND CAST(REGSC.Date AS DATETIME) + CAST(REGSC.StartTime AS DATETIME) > COALESCE ( MaxDate, DATEADD ( DAY, -1, CAST(REGSC.Date AS DATETIME) + CAST(REGSC.StartTime AS DATETIME) ) )

	ALTER TABLE #RegisterSession
	ALTER COLUMN RegisterID INT NOT NULL
	ALTER TABLE #RegisterSession
	ALTER COLUMN RegisterSessionID INT NOT NULL
	ALTER TABLE #RegisterSession
	ALTER COLUMN SessionNo INT NOT NULL
	ALTER TABLE #RegisterSession
	ADD PRIMARY KEY (RegisterID, RegisterSessionID, SessionNo);


	DROP TABLE IF EXISTS #AttendC
	SELECT
        SD.StudentDetailID,
        ENR.OfferingID,
        ENR.OfferingGroupID,
        Planned = COUNT ( RSES.RegisterID ),
        Counted = SUM ( CASE WHEN COALESCE ( MTS.MarkTypeStatusID, 0 ) <> 2 THEN 1 ELSE 0 END ),
        Marked = SUM ( CASE WHEN RM.MarkTypeID IS NOT NULL THEN 1 ELSE 0 END ),
        Unmarked = SUM ( CASE WHEN RM.MarkTypeID IS NULL THEN 1 ELSE 0 END ),
        Present = SUM ( CASE WHEN MTS.MarkTypeStatusID = 1 THEN 1 ELSE 0 END ),
        Absent = SUM ( CASE WHEN MTS.MarkTypeStatusID = 0 THEN 1 ELSE 0 END ),
        Neutral = SUM ( CASE WHEN MTS.MarkTypeStatusID = 2 THEN 1 ELSE 0 END ),
        AuthAbsence = SUM ( CASE WHEN MT.IsAuthorisedAbsence = 1 THEN 1 ELSE 0 END ),
        Late = SUM ( CASE WHEN MT.IsLate = 1 THEN 1 ELSE 0 END ),
        AttendPer = 
            ROUND (
                CASE
                    WHEN SUM ( CASE WHEN COALESCE ( MTS.MarkTypeStatusID, 0 ) <> 2 THEN 1 ELSE 0 END ) = 0 THEN 0
                    ELSE 
                        CAST ( SUM ( CASE WHEN MTS.MarkTypeStatusID = 1 THEN 1 ELSE 0 END ) AS FLOAT )
                        /
                        CAST ( SUM ( CASE WHEN COALESCE ( MTS.MarkTypeStatusID, 0 ) <> 2 THEN 1 ELSE 0 END ) AS FLOAT )
                END
            , 4 )
		INTO #AttendC
    FROM ProSolution.dbo.StudentDetail SD
    INNER JOIN ProSolution.dbo.Enrolment ENR
        ON ENR.StudentDetailID = SD.StudentDetailID
    INNER JOIN ProSolution.dbo.Offering CRS
        ON CRS.OfferingID = ENR.OfferingID
    INNER JOIN ProSolution.dbo.RegisterStudent REGS
        ON REGS.EnrolmentID = ENR.EnrolmentID
    INNER JOIN ProSolution.dbo.Register REG
        ON REG.RegisterID = REGS.RegisterID
    INNER JOIN #RegisterSession RSES
		ON RSES.RegisterID = REG.RegisterID
	LEFT JOIN ProSolution.dbo.RegisterMark AS RM 
		ON RM.RegisterSessionID = RSES.RegisterSessionID
		AND RM.RegisterStudentID = REGS.RegisterStudentID
	LEFT JOIN ProSolution.dbo.MarkType AS MT 
		ON MT.MarkTypeID = RM.MarkTypeID
	LEFT JOIN ProSolution.dbo.MarkTypeStatus MTS
		ON MTS.MarkTypeStatusID = MT.MarkTypeStatusID
	LEFT JOIN ProSolution.dbo.OfferingGroup GRP
        ON GRP.OfferingGroupID = ENR.OfferingGroupID
    WHERE
        SD.AcademicYearID = @AcademicYear
        AND CAST ( RSES.Date AS DATE ) <= CAST ( GETDATE() AS DATE )
    GROUP BY
        SD.StudentDetailID,
        ENR.OfferingID,
        ENR.OfferingGroupID


	--Attendance by Learner
	DROP TABLE IF EXISTS #Attend
	SELECT
		ATT.StudentDetailID,
		Courses = COUNT ( DISTINCT ATT.OfferingID ),
		Planned = SUM ( ATT.Planned ),
        Counted = SUM ( ATT.Counted ),
        Marked = SUM ( ATT.Marked ),
        Unmarked = SUM ( ATT.Unmarked ),
        Present = SUM ( ATT.Present ),
        Absent = SUM ( ATT.Absent ),
        Neutral = SUM ( ATT.Neutral ),
        AuthAbsence = SUM ( ATT.AuthAbsence ),
        Late = SUM ( ATT.Late ),
        AttendPer = 
            ROUND (
                CASE
                    WHEN SUM ( ATT.Counted ) = 0 THEN 0
                    ELSE 
                        CAST ( SUM ( ATT.Present ) AS FLOAT )
                        /
                        CAST ( SUM ( ATT.Counted ) AS FLOAT )
                END
            , 4 )
		INTO #Attend
	FROM #AttendC ATT
	GROUP BY
		ATT.StudentDetailID
	
	--Risk
	DROP TABLE IF EXISTS #Risk
	SELECT
        StudentRef = S.StudentID,
        CourseCode = CRS.CourseCode,
        RiskCode = RSK.EnrolmentAtRiskStatus,
        RiskName = RSKS.AtRiskStatus,
        RiskColour = RSKS.Colour
		INTO #Risk
    FROM PROMONITOR.ProMonitor.dbo.Student S
    INNER JOIN PROMONITOR.ProMonitor.dbo.LearnerInformation_AtRisk RSK
        ON RSK.PMStudentID = S.PMStudentID
    INNER JOIN PROMONITOR.ProMonitor.dbo.CourseAtRiskStatus RSKS
        ON RSKS.CourseAtRiskID = RSK.EnrolmentAtRiskStatus
    INNER JOIN PROMONITOR.ProMonitor.dbo.Enrolment ENR
        ON ENR.PMEnrolmentID = RSK.PMEnrolmentID
    INNER JOIN PROMONITOR.ProMonitor.dbo.Course CRS
        ON CRS.CourseID = ENR.CourseID
    WHERE
        S.AcademicYearID = @AcademicYear
	
	--Not Yet Applied
	DROP TABLE IF EXISTS #NotYetApplied
	SELECT 
		SD.AcademicYearID,
		SD.StudentID,
		SD.StudentDetailID,
		NumApps = COUNT ( CRS.OfferingID ),
		Courses = 
			STUFF (
				(
					SELECT
						', ' + CRS2.Code + ' - ' + REPLACE ( CRS2.Name, ',', '&#44;' )
					FROM ProSolution.dbo.Offering CRS2
					INNER JOIN ProSolution.dbo.ApplicationCourse APPC2
						ON APPC2.OfferingID = CRS2.OfferingID
					INNER JOIN ProSolution.dbo.Application APP2
						ON APP2.ApplicationID = APPC2.ApplicationID
					WHERE
						CRS2.AcademicYearID = SD.AcademicYearID
						AND APP2.StudentDetailID = SD.StudentDetailID
						AND COALESCE ( APP2.CollegeDecisionID, 1 ) <> 0
						AND COALESCE ( APP2.DecisionID, 1 ) = 1
					ORDER BY
						', ' + CRS2.Code + ' - ' + REPLACE ( CRS2.Name, ',', '&#44;' ) 
						FOR XML PATH(''),
						TYPE
				).value('.','varchar(max)'), 1, 2, ''
			)
			INTO #NotYetApplied
	FROM ProSolution.dbo.StudentDetail SD
	INNER JOIN ProSolution.dbo.Application APP
		ON APP.StudentDetailID = SD.StudentDetailID
	INNER JOIN ProSolution.dbo.ApplicationCourse APPC
		ON APPC.ApplicationID = APP.ApplicationID
	INNER JOIN ProSolution.dbo.Offering CRS
		ON CRS.OfferingID = APPC.OfferingID
	WHERE
		SD.AcademicYearID = @NextYear
		AND COALESCE ( APP.CollegeDecisionID, 1 ) <> 0
		AND COALESCE ( APP.DecisionID, 1 ) = 1
	GROUP BY
		SD.AcademicYearID,
		SD.StudentID,
		SD.StudentDetailID
	
	--Not Yet Enrolled
	DROP TABLE IF EXISTS #NotYetEnrolled
	SELECT 
        SD.AcademicYearID,
        SD.StudentID,
		SD.StudentDetailID,
        NumEnrols = COUNT ( CRS.OfferingID ),
        Courses = 
            STUFF (
                (
                        SELECT
                            ', ' + CRS2.Code + ' - ' + REPLACE ( CRS2.Name, ',', '&#44;' )
                        FROM ProSolution.dbo.Offering CRS2
                        INNER JOIN ProSolution.dbo.Enrolment ENR2
                            ON ENR2.OfferingID = CRS2.OfferingID
                        WHERE
                            CRS2.AcademicYearID = SD.AcademicYearID
							AND ENR2.StudentDetailID = SD.StudentDetailID
							AND ENR2.CompletionStatusID IN ( '1', '2', '3' )
                        ORDER BY
                            ', ' + CRS2.Code + ' - ' + REPLACE ( CRS2.Name, ',', '&#44;' ) 
							FOR XML PATH(''),
                            TYPE
                ).value('.','varchar(max)'), 1, 2, ''
            )
			INTO #NotYetEnrolled
    FROM ProSolution.dbo.StudentDetail SD
    INNER JOIN ProSolution.dbo.Enrolment ENR
        ON ENR.StudentDetailID = SD.StudentDetailID
    INNER JOIN ProSolution.dbo.Offering CRS
        ON CRS.OfferingID = ENR.OfferingID
    WHERE
        SD.AcademicYearID = @NextYear
        AND ENR.CompletionStatusID IN ( '1', '2', '3' )
    GROUP BY
        SD.AcademicYearID,
        SD.StudentID,
		SD.StudentDetailID
	
	--Current Destinations
	DROP TABLE IF EXISTS #Destinations
	SELECT
        OC.StudentID,
        OC.LocalDestinationID,
		OC.IsActualDestination,
        RowNum = 
            ROW_NUMBER () OVER (
                PARTITION BY
                    OC.StudentID
                ORDER BY
                    OC.IsActualDestination,
                    CASE WHEN OC.EndDate IS NULL THEN 1 ELSE 2 END,
                    OC.CollectionDate DESC,
                    OC.StartDate DESC
            )
			INTO #Destinations
    FROM ProSolution.dbo.StudentOutcome OC
    WHERE
        OC.ReturnYearID = @DestinationYear

	
	--Main Query
	SELECT
		SystemDatabase = @System,
        AcademicYear = SD.AcademicYearID,
		CollegeCode = COALESCE ( RTRIM ( CGRP.Code ), '--UNK--' ),
		CollegeName = COALESCE ( CGRP.Name, '--Unknown--' ),
		SiteCode = STE.Code,
		SiteName = STE.Description,
		FacCode = COALESCE ( RTRIM ( FAC.Code ), '--UNK--' ),
		FacName = COALESCE ( FAC.Name, '--Unknown--' ),
		TeamCode = RTRIM ( TEAM.Code ),
		TeamName = TEAM.Name,
		CourseCode = CRS.Code,
		CourseTitle = CRS.Name,
        StudentRef = RTRIM ( SD.RefNo ),
		Surname = SD.Surname,
		Forename = SD.FirstForename,
		DOB = SD.DateOfBirth,
		Age31stAug = CAST ( FLOOR ( DATEDIFF ( DAY, COALESCE ( SD.DateOfBirth, CAST ( '20' + LEFT ( SD.AcademicYearID, 2 ) + '-09-01' AS DATETIME2 ) ), CAST ( '20' + LEFT ( SD.AcademicYearID, 2 ) + '-09-01' AS DATETIME2 ) ) / 365.23076923074 ) AS int ),
		CompletionStatusCode = ENR.CompletionStatusID,
		CompletionStatusName = CMP.Description,
		ClassesCourses = COALESCE ( ATT.Courses, 0 ),
        ClassesPlanned = COALESCE ( ATT.Planned, 0 ),
        ClassesCounted = COALESCE ( ATT.Counted, 0 ),
        ClassesMarked = COALESCE ( ATT.Marked, 0 ),
        ClassesUnmarked = COALESCE ( ATT.Unmarked, 0 ),
        ClassesPresent = COALESCE ( ATT.Present, 0 ),
        ClassesAbsent = COALESCE ( ATT.Absent, 0 ),
        ClassesNeutral = COALESCE ( ATT.Neutral, 0 ),
        ClassesAuthAbsence = COALESCE ( ATT.AuthAbsence, 0 ),
        ClassesLate = COALESCE ( ATT.Late, 0 ),
        AttendPer = CAST ( COALESCE ( ATT.AttendPer, 0 ) AS FLOAT ),
        RiskCode = COALESCE ( RSK.RiskCode, 0 ),
        RiskName = COALESCE ( RSK.RiskName, 'Risk Not Set'),
        RiskColour = COALESCE ( RSK.RiskColour, 'Red' ),
		OnTrackToAchieveCode = COALESCE ( ENR.UserDefined10, ENR.UserDefined9, ENR.UserDefined8, 'Not Set' ),
		OnTrackToAchieveColour = 
			CASE
				WHEN COALESCE ( ENR.UserDefined10, ENR.UserDefined9, ENR.UserDefined8 ) = 'R' THEN 'Red'
				WHEN COALESCE ( ENR.UserDefined10, ENR.UserDefined9, ENR.UserDefined8 ) = 'A' THEN 'Orange'
				WHEN COALESCE ( ENR.UserDefined10, ENR.UserDefined9, ENR.UserDefined8 ) = 'G' THEN 'Green'
				ELSE 'Red'
			END,
		OnTrackToAchieveTerm = 
			CASE
				WHEN ENR.UserDefined10 IS NOT NULL THEN 'Term 3'
				WHEN ENR.UserDefined9 IS NOT NULL THEN 'Term 2'
				WHEN ENR.UserDefined8 IS NOT NULL THEN 'Term 1'
				ELSE 'None'
			END,
		NumAppsNextYear = COALESCE ( NYA.NumApps, 0 ),
        AppliedCoursesNextYear = NYA.Courses,
        NumEnrolsNextYear = COALESCE ( NYE.NumEnrols, 0 ),
        EnrolledCoursesNextYear = NYE.Courses,
		NoProgressionRoute = 
			CASE
				WHEN NPR.StudentRef IS NOT NULL THEN
					CASE
						WHEN COALESCE ( NYA.NumApps, 0 ) = 0
						AND COALESCE ( NYE.NumEnrols, 0 ) = 0
							THEN 'Y'
						ELSE 'N'
					END
				ELSE 'N'
			END,
		NoProgressionRouteReason = NPR.Notes,
		NoProgressionRouteCreatedDate = NPR.CreatedDate,
		NoProgressionRouteCreatedBy = NPR.CreatedBy,
		NoProgressionRouteUpdatedDate = NPR.UpdatedDate,
		NoProgressionRouteUpdatedBy = NPR.UpdatedBy,
        DestinationCode = DES.LocalDestinationID,
        DestinationName = DES.Description,
		DestinationIsActual = CAST ( OC.IsActualDestination AS INT ),
        DestinationChanged = CAST ( 0 AS bit ),
		ProgressLearner = CAST ( 0 AS bit ),
        OfferType = 0,
        OfferCondition = 0,
		IsReadyToEnrol = CAST ( 0 AS bit ),
		ReadyToEnrolOption = '',
		HasAlreadyApplied = CAST ( 0 AS bit )
	
	FROM ProSolution.dbo.StudentDetail SD
	INNER JOIN ProSolution.dbo.Enrolment ENR
		ON ENR.StudentDetailID = SD.StudentDetailID
    INNER JOIN ProSolution.dbo.Offering CRS
        ON CRS.OfferingID = ENR.OfferingID
	INNER JOIN ProSolution.dbo.CompletionStatus CMP
		ON CMP.CompletionStatusID = ENR.CompletionStatusID
	INNER JOIN ProSolution.dbo.Site STE
		ON STE.SiteID = CRS.SiteID
	INNER JOIN ProSolution.dbo.CollegeLevel TEAM
		ON TEAM.SID = CRS.SID
	LEFT JOIN ProSolution.dbo.CollegeLevel FAC
		ON FAC.SID = TEAM.ParentSID
	LEFT JOIN ProSolution.dbo.CollegeLevel CGRP
		ON CGRP.SID = FAC.ParentSID
    LEFT JOIN #Destinations OC
        ON OC.StudentID = SD.StudentID
        AND OC.RowNum = 1
    LEFT JOIN ProSolution.dbo.LocalDestination DES
        ON DES.LocalDestinationID = COALESCE ( OC.LocalDestinationID, SD.LocalDestinationID )
    
    LEFT JOIN #Attend ATT
        ON ATT.StudentDetailID = SD.StudentDetailID
    
    LEFT JOIN #AttendC ATTC
        ON ATTC.StudentDetailID = SD.StudentDetailID
        AND ATTC.OfferingID = ENR.OfferingID
        AND COALESCE ( ATTC.OfferingGroupID, 0 ) = COALESCE ( ENR.OfferingGroupID, 0 )
    
    LEFT JOIN #Risk RSK
        ON RSK.StudentRef = SD.RefNo
        AND RSK.CourseCode = CRS.Code
	LEFT JOIN #NotYetApplied NYA
        ON NYA.StudentID = SD.StudentID
	
    LEFT JOIN #NotYetEnrolled NYE
        ON NYE.StudentID = SD.StudentID
	LEFT JOIN WLC.dbo.PRG_NoProgressionRoute NPR
		ON NPR.StudentRef = SD.RefNo
		AND NPR.AcademicYear = @NextYear
		AND NPR.OfferingID = CRS.OfferingID
		AND NPR.SystemDatabase = 'ProSolution'
	WHERE
		SD.AcademicYearID = @AcademicYear
		AND ENR.CompletionStatusID IN ( '1', '2' )
		AND COALESCE ( ENR.ActualEndDate, ENR.ExpectedEndDate ) BETWEEN '20' + LEFT ( @AcademicYear, 2 ) + '-08-01' AND '20' + RIGHT ( @AcademicYear, 2 ) + '-07-31'
		AND ENR.OfferingID = @CourseID
		AND COALESCE ( ENR.OfferingGroupID, 0 ) = COALESCE ( @GroupID, 0 )
	ORDER BY
		SD.Surname,
		SD.FirstForename,
		SD.RefNo
END